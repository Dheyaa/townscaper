<!DOCTYPE html>
<html>
	<head>
		<meta charset=utf-8>
		<title>Three.js</title>
		<%= include_gon %>
		
		<style>
			body { margin: 0; }
			canvas { width: 100%; height: 100% }
		</style>
	</head>
	<body>
		<h2>All Variables</h2>
		<% if @admin_panel %>
			<%= button_to "Back", @admin_panel, method: :get %>
		<% else %>
			<%= button_to "Back", home_index_path, method: :get %>
		<% end %>
		<% if Scene.all.count < 48 %>
			<div class="container">
				<% if @scene %>
					<p><strong>vertices_number:</strong> <%= @scene.vertices_number %></p>
					<p><strong>space_ratio:</strong> <%= @scene.space_ratio %></p>
					<p><strong>position_difference:</strong> <%= @scene.position_difference %></p>
					<p><strong>colour_difference:</strong> <%= @scene.colour_difference %></p>
					<p><strong>file_name:</strong> <%= @scene.file_name %></p>
				<% end %>
			</div>
			<%= javascript_include_tag "three.js" %>
			<script>
				if(gon.vn) {
					var vn = gon.vn
	        var sr = gon.sr
	        var pd = gon.pd
	        var cd = gon.cd
	      }
				//General variables
				var filename = gon.myname;
				var sendNumber = gon.sendNumber;
				console.log(sendNumber);
				var numberOfScenes = 50;
				var eyeLevel = 1.675;
				var cameraDistance = 20;
				var cameraHeight;
				var totalCubeWidth = 20;
				var totalCubedepth = 10;
				var totalCubeHeight;

				//Create scene, camera and renderer
				var scene = new THREE.Scene();
				var camera = new THREE.PerspectiveCamera(100, window.innerWidth / window.innerHeight, 0.1, 1000);
				var renderer = new THREE.WebGLRenderer( { preserveDrawingBuffer: true } );
				renderer.setClearColor("rgb(227, 248, 255)");
				renderer.setSize(window.innerWidth, window.innerHeight);
				renderer.shadowMap.enabled = true;
				renderer.shadowMap.type = THREE.PCFSoftShadowMap;
				document.body.appendChild(renderer.domElement);

				//Adding light
				var light = new THREE.DirectionalLight(0xffffff, 2);
				light.position.set(0, 80, cameraDistance);
				light.shadow;
				var additionalLight = new THREE.AmbientLight(0xffffff, 0.5); // soft white light

				//Adding Geometry
				//Creating Neighbours
				var neighbourCubeWidth = 30;
				var neighbourCubeHeight = 8;
				var neighbourCubeDepth = totalCubedepth;
				var neighbourGeometry = new THREE.BoxGeometry(neighbourCubeWidth, neighbourCubeHeight, neighbourCubeDepth);
				var neighbourMaterial = new THREE.MeshLambertMaterial({ color: ("rgb(115, 115, 115)")})
				var neighbourCube = new THREE.Mesh(neighbourGeometry, neighbourMaterial); //the neighbour to the right
				var neighbourCube1 = new THREE.Mesh(neighbourGeometry, neighbourMaterial); //the neighbour to the left
				neighbourCube.position.x = (totalCubeWidth / 2) + (neighbourCubeWidth / 2);
				neighbourCube1.position.x = ((totalCubeWidth / 2) + (neighbourCubeWidth / 2)) * -1;

				//Creating a human figure
				var humanGeometry = new THREE.Geometry();
				humanGeometry.vertices.push(
					new THREE.Vector3(0.3114, 0, 0), // 0
					new THREE.Vector3(0.2552, 0, 0), // 1
					new THREE.Vector3(0.2269, 0.8336, 0), // 2
					new THREE.Vector3(0.2135, 0, 0), // 3
					new THREE.Vector3(0.16, 0, 0), // 4
					new THREE.Vector3(0.0536, 0.8506, 0), // 5
					new THREE.Vector3(0.0635, 1.3349, 0), // 6
					new THREE.Vector3(0.036, 0.6994, 0), // 7
					new THREE.Vector3(0, 0.7142, 0), // 8
					new THREE.Vector3(0.0014, 1.4408, 0), // 9
					new THREE.Vector3(0.1575, 1.5579, 0), // 10
					new THREE.Vector3(0.1077, 1.7042, 0), // 11
					new THREE.Vector3(0.1751, 1.8, 0), // 12
					new THREE.Vector3(0.2435, 1.8, 0), // 13
					new THREE.Vector3(0.2995, 1.7042, 0), // 14
					new THREE.Vector3(0.2592, 1.5579, 0), // 15
					new THREE.Vector3(0.4453, 1.4408, 0), // 16
					new THREE.Vector3(0.4568, 0.7142, 0), // 17
					new THREE.Vector3(0.4204, 0.6994, 0), // 18
					new THREE.Vector3(0.3703, 1.3349, 0), // 19
					new THREE.Vector3(0.3937, 0.8506, 0) // 20
					);

				humanGeometry.faces.push(
					new THREE.Face3(0, 2, 1),  // 1
					new THREE.Face3(3, 2, 4),  // 2
					new THREE.Face3(0, 2, 20),  // 3
					new THREE.Face3(4, 2, 5),  // 4
					new THREE.Face3(2, 19, 20),  // 5
					new THREE.Face3(2, 5, 19),   // 6
					new THREE.Face3(5, 6, 19),  // 7
					new THREE.Face3(16, 17, 19),  // 8
					new THREE.Face3(17, 18, 19),  // 9
					new THREE.Face3(6, 7, 9),  // 10
					new THREE.Face3(7, 8, 9),  // 11
					new THREE.Face3(15, 16, 19),  // 12
					new THREE.Face3(10, 15, 19),  // 13
					new THREE.Face3(6, 10, 19),  // 14
					new THREE.Face3(6, 9, 10),  // 15
					new THREE.Face3(10, 14, 15),  // 16
					new THREE.Face3(10, 12, 14),  // 17
					new THREE.Face3(10, 11, 12),  // 18
					new THREE.Face3(12, 13, 14)  // 19
					);

				humanGeometry.computeBoundingSphere();
				var humanMaterial = new THREE.MeshLambertMaterial({ color: ("rgb(69, 69, 69)")});
				var human = new THREE.Mesh(humanGeometry, humanMaterial);
				human.material.side = THREE.DoubleSide;
				human.position.z = (totalCubedepth / 2) + 2;
				human.position.x = -(totalCubeWidth / 2) - 0.4;

				//Creating floor
				var floorHeight = 0.1;
				var floorMaterial = new THREE.MeshLambertMaterial({color: ("rgb(31, 31, 31)")});
				var floorGeometry = new THREE.BoxGeometry(60, floorHeight, 100);
				var floor = new THREE.Mesh(floorGeometry, floorMaterial);

				////////////////////////////////////////
				// Control the limits of variables
				////////////////////////////////////////
				var SceneNumber = 1;
				var sampleNumber = 50;
				var maxNumber = 99;
				var minNumber = 5;
				var maxTotalHeight = 51;
				var minTotalHeight = 4;
				var maxSize = 6;
				var minSize = 0.1;
				var boxHeight = 1.9;
				var boxWidth = 1.9;
				var boxVarticalSpace = 2;
				var boxHorizontalSpace = 2;
				var resultColors = [[29,12,13], [22,20,24], [53,47,43], [64,57,48], [61,64,65], [88,65,38], [120,36,16], [84,93,109], [161,69,61], [146,99,98], [172,82,72], [101,106,65], [128,129,132], [1,88,60], [89,125,166], [153,137,120], [94,120,76], [83,130,121], [104,135,118], [164,151,141], [125,147,187], [155,155,144], [157,159,165], [158,160,164], [141,159,155], [86,152,159], [154,166,137], [112,162,168], [143,177,169], [121,177,194], [188,190,186], [195,193,195], [187,194,212], [198,206,206], [227,205,164], [225,209,166], [300,180,125], [233,214,191], [184,220,250], [225,221,219], [213,225,218], [255,219,170], [244,232,214], [246,234,217], [253,238,214], [246,244,246], [251,246,248], [246,245,172]]; 
				resultColors = colorToText(resultColors);
				var numberArray = [];
				var num = 7;
				for (var i = 1; i <= 48; i++) {
					if(i % 2 == 0) { // check if number is even
						numberArray.push(num);
						num+=2;
					} else {
						numberArray.push(num);
						num+=3;
					}
				}

				var widthArray = [];
				for(var i = 0; i < 125; i++) {
					widthArray.push(1.9);
				}
				var wid = 1.9;
				for(var i = 37; i < 125; i++) {
					widthArray[i] = wid;
					wid+=0.1;
				}
			
				var heightArray = [];
				for(var i = minTotalHeight; i <= maxTotalHeight; i++) {
					heightArray.push(i);
				}

				var sizeArray = [];
				var coun = 0;
			
				for(var i = 0; i < 125; i++) {
					sizeArray.push(0.25);
				}

				var va = 0.2;
				for(var i = 37; i < 125; i++) {
					va+=0.3;
					sizeArray[i] = va;
				}


				function colorToText(colorArray) {
					var textColorArray = [];
					for(var i = 0; i < colorArray.length; i++) {
						var color = colorArray[i];
						var r = color [0];
						var g = color [1];
						var b = color [2];
						var textColor = "rgb(" + r + ", " + g + ", " + b + ")";
						textColorArray.push(textColor);
					}
					return textColorArray;
				}

				var row1 = [];
				var row2 = [];
				var row3 = [];
				var row4 = [];
				var row5 = [];
				var row6 = [];
				var row7 = [];
				var row8 = [];
				var row9 = [];
				var row10 = [];
				var row11 = [];
				var row12 = [];
				var row13 = [];
				var row14 = [];
				var row15 = [];
				var row16 = [];
				var row17 = [];
				var row18 = [];
				var row19 = [];
				var row20 = [];
				var row21 = [];
				var row22 = [];
				var row23 = [];
				var row24 = [];
				var row25 = [];

				for(var i = 1; i <= 10; i++) {
					row1.push(i);
					row2.push(i + 10);
					row3.push(i + 20);
					row4.push(i + 30);
					row5.push(i + 40);
					row6.push(i + 50);
					row7.push(i + 60);
					row8.push(i + 70);
					row9.push(i + 80);
					row10.push(i + 90);
					row11.push(i + 100);
					row12.push(i + 110);
					row13.push(i + 120);
					row14.push(i + 130);
					row15.push(i + 140);
					row16.push(i + 150);
					row17.push(i + 160);
					row18.push(i + 170);
					row19.push(i + 180);
					row20.push(i + 190);
					row21.push(i + 200);
					row22.push(i + 210);
					row23.push(i + 220);
					row24.push(i + 230);
					row25.push(i + 240);					
				}

				shuffle(row1);
				shuffle(row2);
				shuffle(row3);
				shuffle(row4);
				shuffle(row5);
				shuffle(row6);
				shuffle(row7);
				shuffle(row8);
				shuffle(row9);
				shuffle(row10);
				shuffle(row11);
				shuffle(row12);
				shuffle(row13);
				shuffle(row14);
				shuffle(row15);
				shuffle(row16);
				shuffle(row17);
				shuffle(row18);
				shuffle(row19);
				shuffle(row20);
				shuffle(row21);
				shuffle(row22);
				shuffle(row23);
				shuffle(row24);
				shuffle(row25);

				var positionArray = [];

				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row1[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row2[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row3[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row4[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row5[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row6[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row7[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row8[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row9[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row10[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row11[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row12[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row13[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row14[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row15[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row16[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row17[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row18[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row19[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row20[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row21[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row22[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row23[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row24[i]);
				}
				for(var i = 0; i < row1.length; i+=2) {
					positionArray.push(row25[i]);
				}

				function shuffle(a) {
				    var j, x, i;
				    for (i = a.length; i; i--) {
				        j = Math.floor(Math.random() * i);
				        x = a[i - 1];
				        a[i - 1] = a[j];
				        a[j] = x;
				    }
				}

				///////////////////////////////////////////////////////////////////////////
			  // Get position 
			  ///////////////////////////////////////////////////////////////////////////
			  function getPosition(ind) {
					var originalXPlace = -(totalCubeWidth / 2) + (boxHorizontalSpace / 2);
					var originalYPlace = -(totalCubeHeight / 2) + (boxVarticalSpace / 2);
					if(ind % 10 === 0) { // check if ind = 10 or multiplied by 10
						var jumpY = Math.floor(ind / 10) - 1;
						var jumpX = 9;
					} else {
						var jumpY = Math.floor(ind / 10);
						var jumpX = (ind - (jumpY * 10) - 1);
					}
					var x = originalXPlace + (jumpX * boxHorizontalSpace);
					var y = originalYPlace + (jumpY * boxVarticalSpace);
					var po = [x, y];
					return po;
				}


				function getRandomPosition(totalCubeHeight) {
					var highNumber = (Math.floor(totalCubeHeight / boxVarticalSpace)) * (totalCubeWidth / boxHorizontalSpace);
					var number = Math.floor(Math.random()*(highNumber-0+1)+0);
					var originalXPlace = -(totalCubeWidth / 2) + (boxHorizontalSpace / 2);
					var originalYPlace = -(totalCubeHeight / 2) + (boxVarticalSpace / 2);
					if(number % 10 === 0) {
						var jumpY = Math.floor(number / 10) - 1;
						var jumpX = 9;
					} else {
						var jumpY = Math.floor(number / 10);
						var jumpX = (number - (jumpY * 10) - 1);
					}
					var x = originalXPlace + (jumpX * boxHorizontalSpace);
					var y = originalYPlace + (jumpY * boxVarticalSpace);
					var po = [x, y];
					return po;
				}

				//Creating a side walk
				var sidewalkDepth = totalCubedepth + maxSize + 4;
				var sidewalkHeight = 0.25;
				var sidewalkMaterial = new THREE.MeshLambertMaterial({color: ("rgb(66, 66, 66)")});
				var sidewalkGeometry = new THREE.BoxGeometry(70, sidewalkHeight, sidewalkDepth);
				var sidewalk = new THREE.Mesh(sidewalkGeometry, sidewalkMaterial);

				///////////////////////////////////////////////////////////////////////////
			  // Generate the scene
			  ///////////////////////////////////////////////////////////////////////////
			  var totalZ;
				var count = 1;
				function generateScene() {
					var vertices = [];
					var objects = [];
					//remove all objects from the scene
					for(var n = scene.children.length - 1; n >= 0; n--) {
						obj = scene.children[n];
						scene.remove(obj);
					}
					var boxNumber = numberArray[sendNumber - 1];
					totalCubeHeight = heightArray[sendNumber - 1]
					cameraHeight = -(totalCubeHeight / 2) + eyeLevel;
					zOffset = 0.005; //to avoid materials overlap
					yOffsect = 0.005; //to avoid materials overlap
					var colourIndex = 0;
					for(var i = 0; i < boxNumber; i++) {
						var x = widthArray[i];
						var y = boxHeight;
						var z = sizeArray[i];
						var zDistance = totalCubedepth / 2;
						var geometry = new THREE.BoxGeometry(x, y, z);
						// var material = new THREE.MeshLambertMaterial({ color: ("rgb(240, 214, 180)") });
						var material = new THREE.MeshLambertMaterial({ color: (resultColors[Math.floor(Math.random() * (colourIndex-0+1) + 0)]) });
						var box = new THREE.Mesh(geometry, material);
						box.material.side = THREE.DoubleSide;
						box.position.x = getPosition(positionArray[i])[0];
						box.position.y = getPosition(positionArray[i])[1] + yOffsect;
						box.position.z = zDistance;
						scene.add(box);
						objects.push(box);
						zOffset+=0.005;
						yOffsect+=0.005;
						if(colourIndex < sendNumber - 1) {
							colourIndex++;
						} else {
							colourIndex = 0;
						}
					} 

					//creating total cube
					var totalGeometry = new THREE.BoxGeometry(totalCubeWidth, totalCubeHeight, totalCubedepth);
					var totalMaterial = new THREE.MeshBasicMaterial({ color: (resultColors[0]) });
					var totalcube = new THREE.Mesh(totalGeometry, totalMaterial);
					totalZ = totalcube.position.z;

					//adjusting neighbour, floor position, sidewalk, human
					neighbourVerticalPosition = (neighbourCubeHeight / 2) - (totalCubeHeight / 2);
					neighbourCube.position.y = neighbourVerticalPosition;
					neighbourCube1.position.y = neighbourVerticalPosition;
					floor.position.y = - (totalCubeHeight / 2) - (sidewalkHeight / 2) - (floorHeight / 2);
					sidewalk.position.y = - (totalCubeHeight / 2) - (sidewalkHeight / 2);
					human.position.y = sidewalk.position.y + (sidewalkHeight / 2);

					//Adjusting Camera Target
					scene.add(camera);
					var yLookAt = -(totalCubeHeight / 2) + eyeLevel + (totalCubeHeight / 3);
					lookAtVector = new THREE.Vector3(0, yLookAt, 0);
					camera.position.z = cameraDistance;
					camera.position.y = cameraHeight;
					camera.lookAt(lookAtVector);

					//Adding objects to the scene
					scene.add(light);
					scene.add(additionalLight);
					scene.add(sidewalk);
					scene.add(human);
					scene.add(floor);
					scene.add(totalcube);
					scene.add(neighbourCube);
					scene.add(neighbourCube1);

					//Raycasting
					objects.push(totalcube);
					camera.updateMatrixWorld();
					var origin = new THREE.Vector3(camera.position.x, camera.position.y, camera.position.z);
					origin.applyMatrix4(camera.matrixWorld);
					for(var c = 0; c < objects.length; c++) {
						var object = objects[c];
						for(var v = 0; v < object.geometry.vertices.length; v++) {
							object.updateMatrixWorld();
							var vertex = object.geometry.vertices[v].clone();
							vertex.applyMatrix4(object.matrixWorld);
							var aim = drawVertex(vertex, 0.08);
							objects.unshift(aim); //add aim at the beginning of the array
							var direction = vertex.clone().sub(origin);
							scene.updateMatrixWorld(true); //important for raycaster

							var raycaster = new THREE.Raycaster(origin, direction.normalize(), 0, 1219);
							var intersect = raycaster.intersectObjects(objects, true);
							if(intersect !== undefined && intersect.length > 0) {
								if(intersect[0].object == aim) {
									var r = object.material.color.r * 255;
									var g = object.material.color.g * 255;
									var b = object.material.color.b * 255;

									// Vertex object
									var vert = {
										colour: [r, g, b],
										horizontal: Math.abs(vertex.z - origin.z),
										vertical: Math.abs(vertex.y - origin.y),
										xPosition: vertex.x,
										yPosition: vertex.y,
										zPosition: vertex.z
									};
									vertices.push(vert);
								}
							}
							objects.shift(); //remove first item (aim from objects)
							scene.remove(aim);
						}
					}
					return vertices;
				}

			  ///////////////////////////////////////////////////////////////////////////
			  // draw a sphere
			  ///////////////////////////////////////////////////////////////////////////
			  function drawVertex (v, radius) {
			    var sphereMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 });
			    sphereMaterial.side = THREE.DoubleSide;
			    var sphere = new THREE.Mesh(new THREE.SphereGeometry(radius, 20), sphereMaterial);
			    sphere.position.set(v.x, v.y, v.z);
			    scene.add(sphere);
			    return sphere;
			  }

			  ///////////////////////////////////////////////////////////////////////////
			  // Get thesis variables
			  ///////////////////////////////////////////////////////////////////////////
				function getVariables() {
					var allVertices = generateScene();
					if(vn) {
						var vertices_number = getNumber(allVertices); // thesis variable
						var position_difference = getPositionDifference(allVertices); //thesis variable
						var colour_difference = getColourDifference(allVertices); //thesis variable
						var space_ratio = getRatio(allVertices); //thesis variable
						if(vertices_number) {
							var sendArray = [vertices_number, space_ratio, position_difference, colour_difference, sendNumber]; 
							if(sendArray) {
								window.open("?sendArray=" + sendArray, "_self");
							} else {
								alert("There is a problem sending data!");
							}
						} else {
							getVariables();
						}
					} else {
						var vertices_number = getNumber(allVertices);
						var space_ratio = getRatio(allVertices); //thesis variable
						var position_difference = getPositionDifference(allVertices); //thesis variable
						var colour_difference = getColourDifference(allVertices); //thesis variable
						if(position_difference == -1) {
							getVariables();
						} else {
							var sendArray = [vertices_number, space_ratio, position_difference, colour_difference, sendNumber]; 
						if(sendArray) {
							window.open("?sendArray=" + sendArray, "_self");
						} else {
							alert("There is a problem sending data!");
						}
						}
					}
				}

				///////////////////////////////////////////////////////////////////////////
			  // Rendering
			  ///////////////////////////////////////////////////////////////////////////
			  var stop = 0;
				function render() {
					requestAnimationFrame(render);
					renderer.render(scene, camera);
					if(stop > 0 && stop < 2) {
						saveAsImage();
					}
					stop++;
				}

				getVariables();
				render();

				///////////////////////////////////////////////////////////////////////////
			  // Calculate vertices number
			  ///////////////////////////////////////////////////////////////////////////
			  function getNumber(vertices) {
			  	if (vertices.length == 4){
						var number = 6 / totalCubeWidth;
					} else {
						var number = vertices.length / totalCubeWidth;
					}
			  	return number;
			  }

			  ///////////////////////////////////////////////////////////////////////////
			  // Calculate space ratio
			  ///////////////////////////////////////////////////////////////////////////
			  function getRatio(vertices) {
			  	var horizDistance = Math.abs(camera.position.z - (totalZ + (totalCubedepth / 2)));
			  	var verticDistance = totalCubeHeight - eyeLevel;
			  	var spaRati = verticDistance / horizDistance;
			  	return spaRati;
			  }

			  ///////////////////////////////////////////////////////////////////////////
			  // Calculate position difference
			  ///////////////////////////////////////////////////////////////////////////
			  function getPositionDifference(vertices) {
			  	if(vertices.length == 6 || vertices.length == 4) {
			  		return 0;
			  	} else {
			  		var yArray = [];
				  	var xArray = [];
				  	var zArray = [];
				  	var standDev1;
				  	for(var i = 0; i < vertices.length; i++) {
				  		yArray.push(vertices[i].yPosition);
				  		xArray.push(vertices[i].xPosition);
				  		zArray.push(vertices[i].zPosition);
				  	}
				  	var yLength = findLength(yArray);
				  	var xLength = findLength(xArray);
				  	if(xLength > yLength || xLength == yLength) {
				  		standDev1 = standardDeviation(yArray);
				  	} else {
				  		standDev1 = standardDeviation(xArray);
				  	}
				  	var standDevZ = standardDeviation(zArray);
				  	var totalStandardDev = standDev1 + standDevZ;
				  	return totalStandardDev;
			  	}
			  }

				///////////////////////////////////////////////////////////////////////////
			  // Find the length of visible geometry
			  ///////////////////////////////////////////////////////////////////////////
			  function findLength(verts) {
			  	var mini = findMin(verts);
			  	var maxi = findMax(verts);
			  	var length = Math.abs(maxi - mini);
			  	return length;
			  }

			  ///////////////////////////////////////////////////////////////////////////
			  // Find the minimum value in array
			  ///////////////////////////////////////////////////////////////////////////
			  function findMin(array) {
			  	var min = array[0];
			  	for(var i = 1; i < array.length; i++) {
			  		if(array[i] < min) {
			  			min = array[i];
			  		}
			  	}
			  	return min;
			  }

			  ///////////////////////////////////////////////////////////////////////////
			  // Find the maximun value in array
			  ///////////////////////////////////////////////////////////////////////////
			  function findMax(array) {
			  	var max = array[0];
			  	for(var i = 1; i < array.length; i++) {
			  		if(array[i] > max) {
			  			max = array[i];
			  		}
			  	}
			  	return max;
			  }

			  ///////////////////////////////////////////////////////////////////////////
			  // Calculate colour difference
			  ///////////////////////////////////////////////////////////////////////////
			  function getColourDifference(vertices) {
			  	var avgColour = colourAverage(vertices);
			    var squareDiffs = [];
			    for(var x = 0; x < vertices.length; x++) {
			      var aimColour = vertices[x].colour;
			      var diff = colorDiff(aimColour, avgColour);
			      var sqrDiff = diff * diff;
			      squareDiffs.push(sqrDiff);
			    }
			    var avgSquareDiff = average(squareDiffs);
			    var stdDev = Math.sqrt(avgSquareDiff); //standard deviation
			    if (isNaN(stdDev)) {
			      stdDev = 0;
			    }
			    return stdDev;
			  }

			  ///////////////////////////////////////////////////////////////////////////
			  // Calculate colour average
			  ///////////////////////////////////////////////////////////////////////////
			  function colourAverage(data){
			    var sumR = 0;
			    var sumG = 0;
			    var sumB = 0;
			    for(var i = 0; i < data.length; i ++) {
			      var r = data[i].colour[0];
			      var g = data[i].colour[1];
			      var b = data[i].colour[2];
			      sumR = sumR + r;
			      sumG = sumG + g;
			      sumB = sumB + b;
			    }
			    var averageR = sumR / data.length;
			    var averageG = sumG / data.length;
			    var averageB = sumB / data.length;
			    var averageColour = [averageR, averageG, averageB];
			    return averageColour;
			  }

			  //////////////////////////////////////////////////////////////////////////////
			  //Get Colour difference using CIE 2000
			  //////////////////////////////////////////////////////////////////////////////
			  function colorDiff(rgb1, rgb2) {
					var lA1 = RGBtolab(rgb1);
			    var lA2 = RGBtolab(rgb2);
			    var color1 = {L: lA1[0], A: lA1[1], B: lA1[2]};
					var color2 = {L: lA2[0], A: lA2[1], B: lA2[2]};
					return DeltaE.getDeltaE00(color1, color2); //http://www.rubydoc.info/gems/npm-rails/0.2.0
				}
				function RGBtolab(rgb){
				  var r = rgb[0] / 255,
				      g = rgb[1] / 255,
				      b = rgb[2] / 255,
				      x, y, z;
				  r = (r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
				  g = (g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
				  b = (b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
				  x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;
				  y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.00000;
				  z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;
				  x = (x > 0.008856) ? Math.pow(x, 1/3) : (7.787 * x) + 16/116;
				  y = (y > 0.008856) ? Math.pow(y, 1/3) : (7.787 * y) + 16/116;
				  z = (z > 0.008856) ? Math.pow(z, 1/3) : (7.787 * z) + 16/116;
				  return [(116 * y) - 16, 500 * (x - y), 200 * (y - z)]
				}

			  ///////////////////////////////////////////////////////////////////////////
			  // Calculate Standard deviation
			  ///////////////////////////////////////////////////////////////////////////
			  function standardDeviation(values){
			    var avg = average(values);
			    var squareDiffs = values.map(function(value){
			      var diff = value - avg;
			      var sqrDiff = diff * diff;
			      return sqrDiff;
			    });
			    var avgSquareDiff = average(squareDiffs);
			    var stdDev = Math.sqrt(avgSquareDiff); // standard deviation
			    if (isNaN(stdDev)) {
			      stdDev = 0;
			    }
			    return stdDev;
			  }

			  ///////////////////////////////////////////////////////////////////////////
			  // Calculate average of data
			  ///////////////////////////////////////////////////////////////////////////
			  function average(data){
			    var sum = data.reduce(function(sum, value){
			      return sum + value;
			    }, 0);
			    var avg = sum / data.length;
			    return avg;
			  }

			  ///////////////////////////////////////////////////////////////////////////
			  // find lowest x position value in array
			  ///////////////////////////////////////////////////////////////////////////
			  function findLowest(vertices) {
			  	var lowest = vertices[0].xPosition;
			  	for(var h = 1; h < vertices.length; h++) {
			  		var xAxis = vertices[h].xPosition;
			  		if(xAxis < lowest) {
			  			lowest = xAxis;
			  		}
			  	}
			  	return lowest;
			  }

			  ///////////////////////////////////////////////////////////////////////////
			  // find highest x position value in array
			  ///////////////////////////////////////////////////////////////////////////
			  function findHighest(vertices) {
			  	var highest = vertices[0].xPosition;
			  	for(var l = 1; l < vertices.length; l++) {
			  		var xAxis = vertices[l].xPosition;
			  		if(xAxis > highest) {
			  			highest = xAxis;
			  		}
			  	}
			  	return highest;
			  }

			  ///////////////////////////////////////////////////////////////////////////
			  // find vertex with highest vertical value in array
			  ///////////////////////////////////////////////////////////////////////////
			  function findHighestVertical(vertices) {
			  	var highestVertical = vertices[0];
			  	for(var i = 1; i < vertices.length; i++) {
			  		if(vertices[i].vertical > highestVertical.vertical) {
			  			highestVertical = vertices[i];
			  		}
			  	}
			  	return highestVertical;
			  }

				///////////////////////////////////////////////////////////////////////////
			  // Save Image
			  ///////////////////////////////////////////////////////////////////////////
				function saveAsImage() {
	        var imgData, imgNode;
	        try {
	          var strMime = "image/jpeg";
	          var strDownloadMime = "image/octet-stream";
	          imgData = renderer.domElement.toDataURL(strMime);
	          saveFile(imgData.replace(strMime, strDownloadMime), filename);
	        } catch (e) {
	          console.log(e);
	          return;
	        }
	    	}

	    	///////////////////////////////////////////////////////////////////////////
			  // Save file
			  ///////////////////////////////////////////////////////////////////////////
	    	var saveFile = function (strData, filename) {
	        var link = document.createElement('a');
	        link.setAttribute("href", "app/assets/images");
	        if (typeof link.download === 'string') {
	          document.body.appendChild(link); //Firefox requires the link to be in the body
	          link.download = filename;
	          link.href = strData;
	          link.click();
	          document.body.removeChild(link); //remove the link when done
	        } else {
	            location.replace(uri);
	        }
	    	}

			</script>
		<% else %>
			<div calss="container">
				<h1>48 Scenes have been generated</h1>
				<%= button_to "Regenerate Scenes", delete_all_scenes_path, method: :get %>
				<%= button_to "Show Data", datapresentation_path, method: :get %>
			</div>
		<% end %>  

	</body>
</html>
